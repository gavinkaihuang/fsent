[uwsgi]
#默认情况下Python plugin不会初始化GIL，也就是说app生成的线程不会执行，如果需要线程，需要配置开启
enable-threads = true

#绑定本地ip和端口,如果直接":port"的话,绑定的ip是0.0.0.0,这是uwsgi方式,如果前端webserver不支持uwsgi的时候用http-socket
http = 127.0.0.1:8001

#and creates a Unix socket for communication between uWSGI and Nginx.
; socket = /tmp/fsent.sock
socket = /tmp/fsent.sock

#stats服务绑定配置,使用时:uwsgitop 127.0.0.1:3167，非必须配置
#stats = 127.0.0.1:3167

#设置python的虚拟环境目录，我这里用的anaconda3创建的虚拟环境
virtualenv = /Users/gavin/SourceCodes/python/fsent/fsentvenv

#设置一个系统环境变量ALITA_CONFIG,这里的变量名字自己起，在项目启动时可以用来传给python配置路径，非必须，可以在代码中配置
; env = ALITA_CONFIG=../config/dev/dev.py

#配置wsgi文件路径和名称
wsgi-file = app.py

#设置WSGI回调,默认“application”
callable = app

# 在每个worker而不是master中加载应用,这样可以保证每个worker在一个一致的并且干净的环境中运行
lazy-apps = true

# 启动主进程，来管理其他进程，其它的uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程。
master = true

#生成指定数目的worker/进程,和workers配置项一样
processes = 2 

#设置用于uwsgi包解析的内部缓存区大小为64k。默认是4k  
buffer-size = 32768 

#当服务器退出的时候自动删除unix socket文件和pid文件  
vacuum = true

#为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。你可以使用这个选项来默默地对抗内存泄漏  
max-requests = 2000

#当一个工作进程的虚拟内存占用超过了限制的大小，那么该进程就会被回收重用（重启）
reload-on-as = 128

#跟reload-on-as的效果类似，不过这个选项控制的是物理内存。你可以同时使用这2个选项,如下配置会导致超过96M物理内存的工作进程重启,当工作进程因此重启时，本次请求的响应不会受影响，返回正常结果
reload-on-rss: 96

#设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数。这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）
reload-mercy = 8

#如果一个请求花费的时间超过了这个harakiri超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）,如下设置会使uwsgi丢弃所有需要20秒以上才能处理完成的请求
harakiri = 20

#当一个请求被harakiri杀掉以后，你将在uWSGI日志中得到一条消息。激活这个选项会打印出额外的信息
harakiri-verbose = true

#设置socket的监听队列大小(默认：100),每一个socket都有一个相关联的队列，请求会被放入其中等待进程来处理。当这个队列慢的时候，新来的请求就会被拒绝。队列大小的最大值依赖于系统内核
listen = 1024

#这个锁用来串行化accept，防止“惊群”现象
thunder-lock = true

#指定pid文件
pidfile = /tmp/fsent.pid

#守护进程的方式,如果用supervisor启动时不要配置这个,跟supervisor里面的日志冲突
daemonize = /tmp/logs/uwsgi.log

#日志格式设置
log-format = %(addr) - %(pid) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(hsize) %(rsize) "%(referer)" "%(uagent)" %(switches) %(micros)
